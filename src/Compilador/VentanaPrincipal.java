package Compilador;


import Compilador.parser;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author francisco
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    boolean compilable;
    boolean leido;
    String fileName;
    String fileAddress;
    parser p;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        p = new parser();
        FileNameExtensionFilter f = new FileNameExtensionFilter("C Programas", "c", "C");
        FileNameExtensionFilter f2 = new FileNameExtensionFilter("Source", "codigo");
        jFileChooser1.addChoosableFileFilter(f);
        jFileChooser1.addChoosableFileFilter(f2);
        jFileChooser1.setFileFilter(f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Compiler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("open");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton3.setText("save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("new");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane1.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //JOptionPane.showMessageDialog(null, "" + System.getProperty("user.dir"));
        jTextArea2.setText("");
        guardar();
        if (compilable) {
          //  p.pars(fileAddress, fileName);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea2.setText("");
        jFileChooser1.setCurrentDirectory(new File("./"));
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            try {
                boolean firstRead = true;
                BufferedReader bf = new BufferedReader(new FileReader(file));
                String sCadena;
                while ((sCadena = bf.readLine()) != null) {
                    if (firstRead) {
                        jTextArea1.append(sCadena);
                        firstRead = false;
                    } else {
                        jTextArea1.append("\n" + sCadena);
                    }
                }
                leido = true;
                fileName = jFileChooser1.getSelectedFile().getName();
                fileAddress = jFileChooser1.getSelectedFile().getParent() + "/";
            } catch (FileNotFoundException ex) {
                JOptionPane.showConfirmDialog(null, "Archivo no encontrado\nError " + ex);
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(null, "Error " + ex);
            }
        } else {
            //cancelado por el usuario
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        guardar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        leido = false;
        jTextArea1.setText("");
        compilable = false;
    }//GEN-LAST:event_jButton4ActionPerformed
    void guardar() {
        File file = new File(fileAddress + fileName);
        if (file.exists() && leido) {
            BufferedWriter outFile = null;
            try {
                outFile = new BufferedWriter(new FileWriter(file));
                String contenido = new String(jTextArea1.getText());
                StringTokenizer st = new StringTokenizer(contenido, "\n");
                try {
                    while (st.hasMoreTokens()) {
                        outFile.write(st.nextToken());
                        outFile.newLine();
                    }
                    outFile.flush();
                    outFile.close();
                    compilable = true;
                    leido = true;
                } catch (IOException e) {
                    JOptionPane.showConfirmDialog(null, "Error " + e);
                } finally {
                    try {
                        outFile.close();
                    } catch (IOException e2) {
                        JOptionPane.showConfirmDialog(null, "Error " + e2);
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(null, "Error " + ex);
            } finally {
                try {
                    outFile.close();
                } catch (IOException ex) {
                    JOptionPane.showConfirmDialog(null, "Error " + ex);
                }
            }
        } else {
            jFileChooser1.setCurrentDirectory(new File("./"));
            int returnVal = jFileChooser1.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                boolean escribir = true;
                boolean sobreEscribir = false;
                String extension = "";
                File file2 = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                while (escribir && file2.exists() && !sobreEscribir) {
                    sobreEscribir = (JOptionPane.showConfirmDialog(this, "¿Desea reemplazar el archivo?", "Save As Confirm...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
                    if (!sobreEscribir) {
                        if (jFileChooser1.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                            file = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                            extension = ".c";
                        } else {
                            escribir = false;
                        }
                    }
                }

                if (escribir) {
                    BufferedWriter outFile = null;
                    try {
                        outFile = new BufferedWriter(new FileWriter(jFileChooser1.getSelectedFile().getAbsolutePath() + ".c"));
                        String contenido = new String(jTextArea1.getText());
                        StringTokenizer st = new StringTokenizer(contenido, "\n");
                        try {
                            while (st.hasMoreTokens()) {
                                outFile.write(st.nextToken());
                                outFile.newLine();
                            }
                            outFile.flush();
                            outFile.close();
                            fileName = jFileChooser1.getSelectedFile().getName() + ".c";
                            fileAddress = jFileChooser1.getSelectedFile().getParent() + "/";
                            compilable = true;
                            leido = true;
                        } catch (IOException e) {
                            JOptionPane.showConfirmDialog(null, "Error " + e);
                        } finally {
                            try {
                                outFile.close();
                            } catch (IOException e2) {
                                JOptionPane.showConfirmDialog(null, "Error " + e2);
                            }
                        }

                    } catch (IOException ex) {
                        JOptionPane.showConfirmDialog(null, "Error " + ex);
                    } finally {
                        try {
                            outFile.close();
                        } catch (IOException ex) {
                            JOptionPane.showConfirmDialog(null, "Error " + ex);
                        }
                    }
                }
            } else {
                //cancelado por el usuario
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
