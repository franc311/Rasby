
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Compilador;

import Compilador.CTD;
import Compilador.CTD2;
import Compilador.CodigoFinal;
import Compilador.CodigoIntermedio;
import Compilador.CompLex;
import Compilador.Cuadrupla;
import Compilador.Expresion;
import Compilador.InformacionCodigo;
import Compilador.Lexicos;
import Compilador.Lista;
import Compilador.OutputDinamica;
import Compilador.OutputEstatica;
import Compilador.OutputLexico2;
import Compilador.Pila;
import Compilador.Tabla;
import Compilador.Textos;
import Compilador.Tres;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\026\002\000\002\027" +
    "\002\000\002\002\011\000\002\005\004\000\002\005\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\006\005\000\002\030\002\000\002\031\002\000\002" +
    "\004\012\000\002\007\003\000\002\007\002\000\002\010" +
    "\004\000\002\010\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\032\002\000\002" +
    "\013\006\000\002\033\002\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\034\002\000\002\035\002\000\002" +
    "\036\002\000\002\014\015\000\002\014\003\000\002\015" +
    "\006\000\002\015\002\000\002\037\002\000\002\040\002" +
    "\000\002\041\002\000\002\042\002\000\002\016\015\000" +
    "\002\043\002\000\002\017\007\000\002\044\002\000\002" +
    "\021\010\000\002\045\002\000\002\020\010\000\002\046" +
    "\002\000\002\022\012\000\002\047\002\000\002\023\010" +
    "\000\002\050\002\000\002\024\005\000\002\051\002\000" +
    "\002\025\010\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\030\000\001\002\000\004\030\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\043\uffff\001\002\000\004\043\011\001\002\000" +
    "\004\024\012\001\002\000\010\003\013\026\020\027\015" +
    "\001\002\000\006\026\ufff9\027\ufff9\001\002\000\006\026" +
    "\020\027\015\001\002\000\004\004\ufff7\001\002\000\004" +
    "\025\024\001\002\000\006\026\ufffa\027\ufffa\001\002\000" +
    "\004\043\022\001\002\000\004\025\ufffc\001\002\000\004" +
    "\006\023\001\002\000\006\026\ufff8\027\ufff8\001\002\000" +
    "\004\002\ufffe\001\002\000\004\004\026\001\002\000\004" +
    "\005\027\001\002\000\004\024\030\001\002\000\030\003" +
    "\051\025\ufff3\031\037\033\034\034\032\035\035\036\047" +
    "\037\031\040\042\041\045\043\041\001\002\000\004\004" +
    "\213\001\002\000\004\004\206\001\002\000\004\025\ufff6" +
    "\001\002\000\004\004\172\001\002\000\004\004\165\001" +
    "\002\000\030\003\uffbd\025\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\001" +
    "\002\000\004\004\117\001\002\000\030\003\uffc2\025\uffc2" +
    "\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\043\uffc2\001\002\000\004\023\uffd1\001\002" +
    "\000\004\004\106\001\002\000\030\003\051\025\ufff4\031" +
    "\037\033\034\034\032\035\035\036\047\037\031\040\042" +
    "\041\045\043\041\001\002\000\030\003\uffc3\025\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\043\uffc3\001\002\000\004\006\uffc7\001\002\000" +
    "\030\003\ufff1\025\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\001\002\000" +
    "\004\004\057\001\002\000\030\003\uffbe\025\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\001\002\000\030\003\uffd9\025\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\001\002\000\030\003\uffbf\025\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\043\uffbf\001\002\000\030\003\uffbb\025\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\001\002\000\030\003\uffbc\025\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\043\uffbc\001\002\000\030\003\uffc0\025\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\001\002\000\030\003\uffc1\025\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\043\uffc1\001\002\000\010\004\061\043\060\044\062" +
    "\001\002\000\040\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\042\uffeb\001\002\000\010\004" +
    "\061\043\060\044\062\001\002\000\040\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\042\uffec" +
    "\001\002\000\014\007\066\010\065\011\070\012\067\042" +
    "\064\001\002\000\010\004\061\043\060\044\062\001\002" +
    "\000\010\004\061\043\060\044\062\001\002\000\010\004" +
    "\061\043\060\044\062\001\002\000\010\004\061\043\060" +
    "\044\062\001\002\000\010\004\061\043\060\044\062\001" +
    "\002\000\040\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\042\uffee\001\002\000\040\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\042\uffed\001\002\000\040\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\070\012\067\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\042\ufff0\001\002\000" +
    "\040\005\uffef\006\uffef\007\uffef\010\uffef\011\070\012\067" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\042\uffef\001\002\000\014\005\uffcb\007\066" +
    "\010\065\011\070\012\067\001\002\000\004\005\077\001" +
    "\002\000\004\006\100\001\002\000\030\003\uffca\025\uffca" +
    "\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\001\002\000\014\005\102\007\066" +
    "\010\065\011\070\012\067\001\002\000\040\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\042" +
    "\uffea\001\002\000\004\006\104\001\002\000\030\003\uffc6" +
    "\025\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\043\uffc6\001\002\000\030\003\ufff2" +
    "\025\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\043\ufff2\001\002\000\004\045\107" +
    "\001\002\000\004\005\uffc5\001\002\000\004\005\111\001" +
    "\002\000\004\006\112\001\002\000\030\003\uffc4\025\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\043\uffc4\001\002\000\004\023\114\001\002" +
    "\000\010\004\061\043\060\044\062\001\002\000\014\006" +
    "\116\007\066\010\065\011\070\012\067\001\002\000\030" +
    "\003\uffd0\025\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\001\002\000\012" +
    "\003\uffdd\004\uffdd\043\uffdd\044\uffdd\001\002\000\012\003" +
    "\121\004\123\043\060\044\062\001\002\000\010\005\uffde" +
    "\021\uffde\022\uffde\001\002\000\010\005\uffdc\021\145\022" +
    "\144\001\002\000\012\003\121\004\123\043\060\044\062" +
    "\001\002\000\026\007\066\010\065\011\070\012\067\013" +
    "\125\014\127\015\126\016\132\017\130\020\131\001\002" +
    "\000\010\004\061\043\060\044\062\001\002\000\010\004" +
    "\061\043\060\044\062\001\002\000\010\004\061\043\060" +
    "\044\062\001\002\000\010\004\061\043\060\044\062\001" +
    "\002\000\010\004\061\043\060\044\062\001\002\000\010" +
    "\004\061\043\060\044\062\001\002\000\020\005\uffe0\007" +
    "\066\010\065\011\070\012\067\021\uffe0\022\uffe0\001\002" +
    "\000\020\005\uffe4\007\066\010\065\011\070\012\067\021" +
    "\uffe4\022\uffe4\001\002\000\020\005\uffe5\007\066\010\065" +
    "\011\070\012\067\021\uffe5\022\uffe5\001\002\000\020\005" +
    "\uffe3\007\066\010\065\011\070\012\067\021\uffe3\022\uffe3" +
    "\001\002\000\020\005\uffe2\007\066\010\065\011\070\012" +
    "\067\021\uffe2\022\uffe2\001\002\000\020\005\uffe1\007\066" +
    "\010\065\011\070\012\067\021\uffe1\022\uffe1\001\002\000" +
    "\010\005\143\021\145\022\144\001\002\000\030\005\102" +
    "\007\066\010\065\011\070\012\067\013\125\014\127\015" +
    "\126\016\132\017\130\020\131\001\002\000\010\005\uffdf" +
    "\021\uffdf\022\uffdf\001\002\000\012\003\uffe7\004\uffe7\043" +
    "\uffe7\044\uffe7\001\002\000\012\003\uffe9\004\uffe9\043\uffe9" +
    "\044\uffe9\001\002\000\012\003\121\004\123\043\060\044" +
    "\062\001\002\000\010\005\uffe8\021\uffe8\022\uffe8\001\002" +
    "\000\012\003\121\004\123\043\060\044\062\001\002\000" +
    "\010\005\uffe6\021\uffe6\022\uffe6\001\002\000\004\005\153" +
    "\001\002\000\004\024\154\001\002\000\030\003\051\025" +
    "\ufff3\031\037\033\034\034\032\035\035\036\047\037\031" +
    "\040\042\041\045\043\041\001\002\000\004\025\156\001" +
    "\002\000\032\003\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043" +
    "\uffdb\001\002\000\032\003\uffd7\025\uffd7\031\uffd7\032\161" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\043\uffd7\001\002\000\030\003\uffda\025\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\043\uffda\001\002\000\004\024\162\001\002\000\030" +
    "\003\051\025\ufff3\031\037\033\034\034\032\035\035\036" +
    "\047\037\031\040\042\041\045\043\041\001\002\000\004" +
    "\025\164\001\002\000\030\003\uffd8\025\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\043\uffd8\001\002\000\010\004\061\043\060\044\062\001" +
    "\002\000\014\005\uffcf\007\066\010\065\011\070\012\067" +
    "\001\002\000\004\005\170\001\002\000\004\006\171\001" +
    "\002\000\030\003\uffce\025\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043\uffce\001" +
    "\002\000\012\003\uffd6\004\uffd6\043\uffd6\044\uffd6\001\002" +
    "\000\012\003\121\004\123\043\060\044\062\001\002\000" +
    "\010\005\uffd5\021\145\022\144\001\002\000\004\005\176" +
    "\001\002\000\004\024\177\001\002\000\030\003\uffd4\025" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\043\uffd4\001\002\000\030\003\051\025" +
    "\ufff3\031\037\033\034\034\032\035\035\036\047\037\031" +
    "\040\042\041\045\043\041\001\002\000\004\025\uffd3\001" +
    "\002\000\004\025\203\001\002\000\030\003\uffd2\025\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\001\002\000\004\025\205\001\002" +
    "\000\004\025\ufff5\001\002\000\004\045\207\001\002\000" +
    "\004\005\uffcd\001\002\000\004\005\211\001\002\000\004" +
    "\006\212\001\002\000\030\003\uffcc\025\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\043\uffcc\001\002\000\010\004\061\043\060\044\062\001" +
    "\002\000\014\005\uffc9\007\066\010\065\011\070\012\067" +
    "\001\002\000\004\005\216\001\002\000\004\006\217\001" +
    "\002\000\030\003\uffc8\025\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\001" +
    "\002\000\006\026\ufffb\027\ufffb\001\002\000\004\025\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\006\002\004\026\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\013\004\020\005\015\006\016\001\001\000\002\001\001" +
    "\000\006\004\220\006\217\001\001\000\004\030\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\032\010\042\011\045\014\043\016" +
    "\037\017\055\020\051\021\054\022\047\023\035\024\053" +
    "\025\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\112\001\001\000\002\001\001\000\026\011\104" +
    "\014\043\016\037\017\055\020\051\021\054\022\047\023" +
    "\035\024\053\025\052\001\001\000\002\001\001\000\004" +
    "\050\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\062\001\001\000\002\001\001\000\004" +
    "\012\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\074\001\001\000\004\012\073\001\001\000\004" +
    "\012\072\001\001\000\004\012\071\001\001\000\004\012" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\117\001\001\000" +
    "\006\012\123\013\121\001\001\000\002\001\001\000\004" +
    "\035\151\001\001\000\006\012\141\013\140\001\001\000" +
    "\002\001\001\000\004\012\137\001\001\000\004\012\136" +
    "\001\001\000\004\012\135\001\001\000\004\012\134\001" +
    "\001\000\004\012\133\001\001\000\004\012\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\147\001\001\000\004\032\145\001\001\000\006\012\123" +
    "\013\146\001\001\000\002\001\001\000\006\012\123\013" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\154\010\042\011\045\014\043\016" +
    "\037\017\055\020\051\021\054\022\047\023\035\024\053" +
    "\025\052\001\001\000\002\001\001\000\004\036\156\001" +
    "\001\000\004\015\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\162\010\042\011\045\014\043\016" +
    "\037\017\055\020\051\021\054\022\047\023\035\024\053" +
    "\025\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\165\001\001\000\004\044\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\172\001\001\000\006\012\123\013\173\001\001\000\004" +
    "\040\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\177\001\001\000\032\007\200\010\042\011\045" +
    "\014\043\016\037\017\055\020\051\021\054\022\047\023" +
    "\035\024\053\025\052\001\001\000\004\042\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\213\001\001\000\004\047\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	static String nombreFichero;

	//Inicia el parser
	public static void main(String args[]) {
                args = new String[] {"programa.c"};
		if (args.length != 1)
			System.out.println("No hay programa a procesar");
		else {
			try {
				Yylex lexico = new Yylex(new FileReader(args[0]));
				nombreFichero = (String)args[0];
				new parser(lexico).parse();
			}
			catch (Exception e) {
				System.out.println("El fichero del programa no existe o no esta abierto");
			}
		}
	}

      /*  public void pars(String ruta, String archivo) {
            if (archivo.equals("")) {
                System.out.println("No hay programa a procesar");
            } else {
                try {
                    //Yylex lexico = new Yylex(new FileReader(ruta + archivo), archivo);
                    Yylex lexico = new Yylex(new FileReader(ruta + archivo));
                    nombreFichero = archivo;
                    new parser(lexico).parse();
                } catch (Exception e) {
                    System.out.println("El fichero del programa no existe o no esta abierto");
                }
            }
        }

	// Muestra el texto de un error
	public void report_error(String message) {
		//System.err.println(message);
                VentanaPrincipal.jTextArea2.append(message + "\n");
	}*/
        principales.IDE id;
        public void pars( String archivo) {
            if (archivo.equals("")) {
                System.out.println("No hay programa a procesar");
            } else {
                try {
                    //Yylex lexico = new Yylex(new FileReader(ruta + archivo), archivo);
                    Yylex lexico = new Yylex(new FileReader( archivo));
                    nombreFichero = archivo;
                    new parser(lexico).parse();
                } catch (Exception e) {
                    System.out.println("El fichero del programa no existe o no esta abierto");
                }
            }
        }

	// Muestra el texto de un error
	public void report_error(String message) {
		//System.err.println(message);
              //  VentanaPrincipal.jTextArea2.append(message + "\n");
            principales.IDE.output.setText(principales.IDE.output.getText() + message+"\n");
	}

	// Muestra un error de sintaxis
	public void syntax_error(Symbol actual) {
		if (actual.sym == sym.EOF)
			report_error("Linea :" + InformacionCodigo.linea + " Instruccion incompleta "+
				       "Token : "+InformacionCodigo.token);
		else
			report_error("Linea: "+ InformacionCodigo.linea + " Error sintáctico "+
				       "Token : "+InformacionCodigo.token);
	}

	// Muestra el texto de un error irrecuperable
	public void report_fatal_error(String message, Object info) {
                done_parsing();
                report_error("No se puede recuperar el error previo");
		System.err.println(message);
	}

	// Muestra un mensaje cuando no se puede seguir analizando
	public void unrecovered_syntax_error(Symbol actual) {
                System.err.println("Irrecuperable " + actual);
	}

	//Muestra un mensaje de error con linea, token y mensaje
	public void error(String mensaje) {
		report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
	}
        
        //determinar cuantos testigos debe analizar correctamente para considerar que larecuperación ha tenido exito.
        protected final static int _error_sync_size = 3;
        protected int error_sync_size() {
                //System.out.println(":error_sync_size was called.");
                return _error_sync_size;
        }
        
        //version para depuracion
        public void debug_message(String mess) {
                System.err.println(mess);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    Vector pT = new Vector();
    int actualFinIf = 0;
    int actualFinWhile = 0;
    public String finIf() {
        return "S" + actualFinIf;
    }
    public String finWhile() {
        return "W" + actualFinWhile;
    }
    String eV, eF;
    Expresion condicionX;
    class DatosCASE {
        String tmpExpr, etqFinal; 
    }
    class BloqueCondicion { 
        String etqVerdad, etqFalso;
    }
    public int actualTmp=0; 
    public String nuevaTmp() {
        return "tmp"+(++actualTmp); 
    }
    public String actualTmp() {
        return "tmp"+actualTmp; 
    }
    public int actualEtq=0; 
    public String nuevaEtq() { 
        return "L"+(++actualEtq);
    }
    private String generarTerceto(String terceto) {
        String tmp = nuevaTmp(); 
        System.out.println(tmp + terceto); 
        return tmp;
    }
    private BloqueCondicion generarCondicion( String Rvalor1, String condicion, String Rvalor2) { 
        BloqueCondicion etqs = new BloqueCondicion();
        etqs.etqVerdad = nuevaEtq(); 
        etqs.etqFalso = nuevaEtq();
        System.out.println("\tif "+ Rvalor1 + condicion + Rvalor2 + " goto "+ etqs.etqVerdad);
        System.out.println("\tgoto "+ etqs.etqFalso);
        return etqs; 
    }
        Tabla tabla;
        int cuentaWhiles;
        int cuentaDirecciones;
        CodigoIntermedio codigoIntermedio;
        OutputLexico2 opL;
        OutputDinamica od;
        OutputEstatica os;
        CTD ctd;
        CTD2 ctd2;
        int cuentaIf;
        Pila pilaIf;
        int cuentaBucle;
        Pila pilaBucle;
        int cuentaCadenas;
        Lista listaCadenas;
        boolean imprimirEntero;
	void inicializar() {
            tabla = new Tabla();
            cuentaWhiles = 0;
            cuentaDirecciones = -4;
            cuentaIf = 0;
            pilaIf = new Pila();
            cuentaBucle = 0;
            pilaBucle = new Pila();
            cuentaCadenas = 0;
            listaCadenas = new Lista();
            imprimirEntero = false;
            String nombre = parser.nombreFichero.substring(0, parser.nombreFichero.lastIndexOf("."));
            codigoIntermedio = new CodigoIntermedio(nombre + ".ci");
            try {
                codigoIntermedio.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                codigoIntermedio.cerrarFicheroEscritura();
            }
            ctd = new CTD(nombre + ".3dir");
            try {
                ctd.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                ctd.cerrarFicheroEscritura();
            }
            ctd2 = new CTD2(nombre + ".3dir2");
            try {
                ctd2.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                ctd2.cerrarFicheroEscritura();
            }
            opL = new OutputLexico2(nombre + ".lexemas");
            try {
                opL.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                opL.cerrarFicheroEscritura();
            }
            od = new OutputDinamica(nombre + ".dinamica");
            try {
                od.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                opL.cerrarFicheroEscritura();
            }
            os = new OutputEstatica(nombre + ".estatica");
            try {
                os.abrirFicheroEscritura();
            } catch(IOException e) {
                System.out.println(Textos.ficheroCiNoExiste);
                opL.cerrarFicheroEscritura();
            }
	}
        
        void traspasarLexemas() {
            opL.guardarVector(Lexicos.getLexemas());
        }

        
        boolean existeSimbolo(String id) {
            return tabla.existeSimbolo(id);
        }
        
        void addSimbolo(String id) {
            tabla.addSimbolo(id);
        }

        void setDireccionSimbolo(String id, int dir) {
            tabla.setDireccionSimbolo(id, dir);
        }
        
        void setValorSimbolo(String id, int valor) {
            tabla.setValorSimbolo(id, valor);
        }

        Expresion suma(Expresion e1, Expresion e2) {
            String tmp = generarTerceto("=" + e1.getValor() + "+" + e2.getValor());
            ctd.guardarCTD(new Tres(actualTmp(), e1.getValor(), "+", e2.getValor(), (e1.getResultado() + e2.getResultado()), "expresion"));
            ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e1.getValor()), "+", CompLex.checarComponenteLexico(e2.getValor()), (e1.getResultado() + e2.getResultado()), "expresion"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, "tmp"+actualTmp , e1.getResultado() + e2.getResultado());
        }
        
        Expresion resta(Expresion e1, Expresion e2) {
            String tmp = generarTerceto("="+e1.getValor() + "-" + e2.getValor());
            ctd.guardarCTD(new Tres(actualTmp(), e1.getValor(), "-", e2.getValor(), (e1.getResultado() - e2.getResultado()), "expresion"));
            ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e1.getValor()), "-", CompLex.checarComponenteLexico(e2.getValor()), (e1.getResultado() - e2.getResultado()), "expresion"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTA",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, "tmp"+actualTmp, e1.getResultado() - e2.getResultado());
        }
        
        Expresion producto(Expresion e1, Expresion e2) {
            String tmp = generarTerceto("="+e1.getValor() + "*" + e2.getValor());
            ctd.guardarCTD(new Tres(actualTmp(), e1.getValor(), "*", e2.getValor(), (e1.getResultado() * e2.getResultado()), "expresion"));
            ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e1.getValor()), "*", CompLex.checarComponenteLexico(e2.getValor()), (e1.getResultado() * e2.getResultado()), "expresion"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, "tmp"+actualTmp, e1.getResultado() * e2.getResultado());
        }

        Expresion division(Expresion e1, Expresion e2) {
            String tmp = generarTerceto("="+e1.getValor() + "/" + e2.getValor());
            ctd.guardarCTD(new Tres(actualTmp(), e1.getValor(), "/", e2.getValor(), (e1.getResultado() / e2.getResultado()), "expresion"));
            ctd.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e1.getValor()), "/", CompLex.checarComponenteLexico(e2.getValor()), (e1.getResultado() / e2.getResultado()), "expresion"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, "tmp"+actualTmp, e1.getResultado() / e2.getResultado());
        }

        Expresion entero(String e) {
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",
                    e,
                    null,
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, e, Integer.parseInt(e));
        }

        Expresion identificador(String id) {
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
                    String.valueOf((tabla.getSimbolo(id)).getDireccion()),
                    null,
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, id);
        }

        Expresion or(Expresion c1, Expresion c2) {
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
                    String.valueOf(c1.getDireccion()),
                    String.valueOf(c2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, c2.etqVerdad, c2.etqFalso);
        }
        
        Expresion and(Expresion c1, Expresion c2) {
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
                    String.valueOf(c1.getDireccion()),
                    String.valueOf(c2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, c2.etqVerdad, c2.etqFalso);
        }
        
        Expresion mayor(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + ">" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), ">", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), ">", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }
        
        Expresion mayorIgual(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + ">=" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), ">=", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), ">=", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYORI",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }

        Expresion menor(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + "<" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), "<", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), "<", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }

        Expresion menorIgual(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + "<=" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), "<=", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), "<=", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENORI",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }

        Expresion igual(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + "==" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), "==", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), "==", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }
        
        Expresion distinto(Expresion e1, Expresion e2) {
            String eV = nuevaEtq();
            String eF = nuevaEtq();
            System.out.println("if "+ e1.getValor() + "!=" + e2.getValor() + " goto "+ eV);
            System.out.println("goto "+ eF);
            ctd.guardarCTD(new Tres(e1.getValor(), "!=", e2.getValor(), eV, "condicion"));
            ctd.guardarCTD(new Tres(eF, "salto"));
            ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(e1.getValor()), "!=", CompLex.checarComponenteLexico(e2.getValor()), eV, "condicion"));
            ctd2.guardarCTD(new Tres(eF, "salto"));
            cuentaDirecciones+=4;
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
                    String.valueOf(e1.getDireccion()),
                    String.valueOf(e2.getDireccion()),
                    String.valueOf(cuentaDirecciones)));
            return new Expresion(cuentaDirecciones, eV, eF);
        }

        void asignacion(String id, Expresion e) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
                    String.valueOf(e.getDireccion()),
                    null,
                    String.valueOf((tabla.getSimbolo(id)).getDireccion())));
            
        }

        void cerrarCI() {
            codigoIntermedio.cerrarFicheroEscritura();
            ctd.cerrarFicheroEscritura();
            ctd2.cerrarFicheroEscritura();
            traspasarLexemas();
            opL.cerrarFicheroEscritura();
            //copiar vector de lexic os procesador por flex hacia instrucciones de la tabla estatica
            os.guardarVector(opL.getVector());
            os.cerrarFicheroEscritura();
            //copiar vector de la tabla y procesar en instruccions para la tabla dinamica
            od.guardarVector(tabla.getVector());
            od.cerrarFicheroEscritura();
            
        }
        
        void condicion(Expresion e, int n) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "SALTAR_CONDICION",
                String.valueOf(e.getDireccion()),
                null,
                "ELSE_" + String.valueOf(n)));
            eV = e.etqVerdad;
            eF = e.etqFalso;
            condicionX = e;
        }

        void saltarEtiqueta(String eti, int n) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "SALTAR_ETIQUETA",
                null,
                null,
                eti + "_" + String.valueOf(n)));
        }
        
        void ponerEtiqueta(String eti, int n) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "ETIQUETA",
                null,
                null,
                eti + "_" + String.valueOf(n)));
        }
        
        void condicion2(Expresion e, int n) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "SALTAR_CONDICION",
                String.valueOf(e.getDireccion()),
                null,
                "FINBUCLE_" + String.valueOf(n)));
        }
        
        void imprimirW(Expresion e) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "IMPRIMIR_ENTERO",
                String.valueOf(e.getDireccion()),
                null,
                null));
            imprimirEntero = true;
        }
        
        void imprimirS(String cadena, int cuenta) {
            listaCadenas.addCadena(cadena);
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "IMPRIMIR_CADENA",
                "CADENA_" + String.valueOf(cuenta),
                null,
                null));
        }
        void paint(String cadena) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "PAINTER",
                "",
                "",
                cadena));
        }
        void temporizador(Expresion e) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "TIMER",
                String.valueOf(e.getDireccion()),
                null,
                null));
        }
        
        void escribirPin(Expresion e1, Expresion e2) {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "ESCRIBIR_PIN",
                String.valueOf(e1.getDireccion()),
                String.valueOf(e2.getDireccion()),
                null));
        }

        void generarCadenas() {
            for(int i=0; i < listaCadenas.size(); i++) {
                codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                    "PONER_CADENA",
                    "CADENA_" + String.valueOf(i+1),
                    null,
                    listaCadenas.getCadena(i)));
            }
            if (imprimirEntero) {
                    codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                    "PONER_ENTERO",
                    null,
                    null,
                    null));
            }
            
        }
        void generarFootter() {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "BASE",
                null,
                null,
                null));
            
        }

        void generarCF() {
            CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio, parser.nombreFichero);
            try {
                codigoFinal.traducirCodigo();
            } catch(IOException e) {
            }
        }

        void finPrograma() {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "FIN",
                null,
                null,
                null));
        }

        void ponerHeader() {
            codigoIntermedio.guardarCuadrupla(new Cuadrupla(
                "PONER_HEADER",
                null,
                null,
                null));
        }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

                    inicializar();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    ponerHeader();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= NT$0 CLASS NT$1 ID LLLAVE Body RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= Declaraciones Cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Body ::= Cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaraciones ::= Declaraciones Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaraciones ::= error 
            {
              Object RESULT =null;
		 
                        parser.report_error("Linea: " +(InformacionCodigo.linea-1) + "Error en la sentencia declarativa"); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaracion ::= INT ID PTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(existeSimbolo(id)) {
                        parser.error(Textos.simboloRedeclarado);
                    } else {
                        addSimbolo(id);
                        cuentaDirecciones+=4;
                        setDireccionSimbolo(id, cuentaDirecciones);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("main:"); ctd.guardarCTD(new Tres("main", "etiqueta"));ctd2.guardarCTD(new Tres("main", "etiqueta")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                    finPrograma();
                    generarCadenas();
                    generarFootter();
                    cerrarCI();
                    generarCF();
                    //opL.imprimirTablaEstatica();
                    //tabla.imprimirTablaDinamica();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Cuerpo ::= MAIN NT$2 LPAREN RPAREN LLLAVE BloqueSentencias NT$3 RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueSentencias ::= Sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueSentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencias ::= Sentencias Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencias ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = suma(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = resta(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= Expresion PRODUCTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = producto(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expresion ::= Expresion DIVISION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = division(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = entero(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(existeSimbolo(id)) {
                        RESULT = identificador(id);
                    } else {
                        parser.error(Textos.simboloNoDeclarado);
                        RESULT = identificador(null);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println("label "+ c1.etqFalso); ctd.guardarCTD(new Tres(c1.etqFalso, "etiqueta"));ctd2.guardarCTD(new Tres(c1.etqFalso, "etiqueta")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Condicion ::= Condicion OR NT$4 Condicion 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = or(c1, c2);
                    System.out.println("label "+ c1.etqVerdad);
                    System.out.println("goto "+ c2.etqVerdad);
                    ctd.guardarCTD(new Tres(c1.etqVerdad, "etiqueta"));
                    ctd.guardarCTD(new Tres(c2.etqVerdad, "salto"));
                    ctd2.guardarCTD(new Tres(c1.etqVerdad, "etiqueta"));
                    ctd2.guardarCTD(new Tres(c2.etqVerdad, "salto"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 System.out.println("label "+ c1.etqVerdad); ctd.guardarCTD(new Tres(c1.etqVerdad, "etiqueta"));ctd2.guardarCTD(new Tres(c1.etqVerdad, "etiqueta")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Condicion ::= Condicion AND NT$5 Condicion 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = and(c1, c2);
                    System.out.println("label "+ c1.etqFalso);
                    System.out.println("goto "+ c2.etqFalso);
                    ctd.guardarCTD(new Tres(c1.etqFalso, "etiqueta"));
                    ctd.guardarCTD(new Tres(c2.etqFalso, "salto"));
                    ctd2.guardarCTD(new Tres(c1.etqFalso, "etiqueta"));
                    ctd2.guardarCTD(new Tres(c2.etqFalso, "salto"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Condicion ::= Expresion IGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = igual(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = distinto(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Condicion ::= Expresion MAYOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = mayor(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Condicion ::= Expresion MAYORI Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = mayorIgual(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicion ::= Expresion MENOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = menor(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Condicion ::= Expresion MENORI Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = menorIgual(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Condicion ::= LPAREN Condicion RPAREN 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Condicion ::= error 
            {
              Expresion RESULT =null;
		
                    parser.report_error("Linea: " + (InformacionCodigo.linea) + " error sintáctico Se espera una expresion o condicion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              Object RESULT =null;
  
                    actualFinIf++;
                    cuentaIf++;
                    pilaIf .apilar(cuentaIf);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    condicion(c, pilaIf.verCima());
                    System.out.println("label "+ c.etqVerdad);
                    ctd.guardarCTD(new Tres(c.etqVerdad, "etiqueta"));
                    ctd2.guardarCTD(new Tres(c.etqVerdad, "etiqueta"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                    saltarEtiqueta("FINIF", pilaIf.verCima());
                    ponerEtiqueta("ELSE", pilaIf.verCima());
                    System.out.println("goto "+ finIf()); 
                    System.out.println("label "+ c.etqFalso);
                    ctd.guardarCTD(new Tres(finIf(), "salto"));
                    ctd.guardarCTD(new Tres(c.etqFalso, "etiqueta"));
                    ctd2.guardarCTD(new Tres(finIf(), "salto"));
                    ctd2.guardarCTD(new Tres(c.etqFalso, "etiqueta"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SentIf ::= IF LPAREN NT$6 Condicion NT$7 RPAREN LLLAVE BloqueSentencias RLLAVE NT$8 SentElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                    ponerEtiqueta("FINIF", pilaIf.verCima());
                    pilaIf.desapilar();
                    System.out.println("label "+ finIf());
                    ctd.guardarCTD(new Tres(finIf(), "etiqueta"));
                    ctd2.guardarCTD(new Tres(finIf(), "etiqueta"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SentIf ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.report_error("Linea:" + InformacionCodigo.linea + " Error sintáctico");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SentElse ::= ELSE LLLAVE BloqueSentencias RLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentElse",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentElse",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =null;

                        actualFinWhile++;
                        cuentaBucle++;
                        pilaBucle.apilar(cuentaBucle);
                        ponerEtiqueta("BUCLE", pilaBucle.verCima());
                        System.out.println("label "+ finWhile());
                        ctd.guardarCTD(new Tres(finWhile(), "etiqueta"));
                        ctd2.guardarCTD(new Tres(finWhile(), "etiqueta"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        condicion2(c, pilaBucle.verCima());
                        System.out.println("label "+ c.etqVerdad);
                        ctd.guardarCTD(new Tres(c.etqVerdad, "etiqueta"));
                        ctd2.guardarCTD(new Tres(c.etqVerdad, "etiqueta"));

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        cuentaWhiles++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                        cuentaWhiles--;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SentWhile ::= WHILE LPAREN NT$9 Condicion NT$10 RPAREN LLLAVE NT$11 BloqueSentencias NT$12 RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                        saltarEtiqueta("BUCLE", pilaBucle.verCima());
                        ponerEtiqueta("FINBUCLE", pilaBucle.verCima());
                        pilaBucle.desapilar();
                        System.out.println("goto "+ finWhile());
                        System.out.println("label "+ c.etqFalso);
                        ctd.guardarCTD(new Tres(finWhile(), "salto"));
                        ctd.guardarCTD(new Tres(c.etqFalso, "etiqueta"));
                        ctd2.guardarCTD(new Tres(finWhile(), "salto"));
                        ctd2.guardarCTD(new Tres(c.etqFalso, "etiqueta"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentWhile",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        if(existeSimbolo(id)) {
                        } else {
                            //parser.error(Textos.simboloNoDeclarado);
                            parser.report_error("Linea:" + idleft + " error semántico no se ha declarado previamente " + id);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SentAsignacion ::= ID NT$13 ASIGNAR Expresion PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        asignacion(id, e);
                        setValorSimbolo(id, e.getResultado());
                        System.out.println(id +" = "+ e.getValor());
                        ctd.guardarCTD(new Tres(id, e.getValor(), e.getResultado(), "asignacion"));
                        ctd2.guardarCTD(new Tres(CompLex.checarComponenteLexico(id), CompLex.checarComponenteLexico(e.getValor()), e.getResultado(),"asignacion"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentAsignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        imprimirW(e);
                        ctd.guardarCTD(new Tres(nuevaTmp(), e.getValor(), e.getResultado(), "asignacion"));
                        ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e.getValor()), e.getResultado(), "asignacion"));
                        ctd.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd.guardarCTD(new Tres("printN", "printN"));
                        ctd2.guardarCTD(new Tres("printN", "printN"));
                        System.out.println(actualTmp() + "=" + CompLex.checarComponenteLexico(e.getValor()));
                        System.out.println("Param " + actualTmp());
                        System.out.println("call printN, 1");
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SentPrintN ::= PRINTN LPAREN Expresion NT$14 RPAREN PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPrintN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        cuentaCadenas++;
                        imprimirS(tex, cuentaCadenas);
                        ctd.guardarCTD(new Tres(nuevaTmp(), tex, 0, "texto"));
                        ctd2.guardarCTD(new Tres(actualTmp(), tex, 0, "texto"));
                        ctd.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd.guardarCTD(new Tres("printS", "printS"));
                        ctd2.guardarCTD(new Tres("printS", "printS"));
                        System.out.println(actualTmp() + "=" + tex);
                        System.out.println("Param " + actualTmp());
                        System.out.println("call printS, 1");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SentPrintS ::= PRINTS LPAREN CADENATEXTO NT$15 RPAREN PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPrintS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        escribirPin(e1, e2);
                        ctd.guardarCTD(new Tres(nuevaTmp(), e1.getValor(), e1.getResultado(), "asignacion"));
                        ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e1.getValor()), e1.getResultado(), "asignacion"));
                        ctd.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd.guardarCTD(new Tres(nuevaTmp(), e2.getValor(), e2.getResultado(), "asignacion"));
                        ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e2.getValor()), e2.getResultado(), "asignacion"));
                        ctd.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(),"parametro"));
                        ctd.guardarCTD(new Tres("pinWriter", "pinWriter"));
                        ctd2.guardarCTD(new Tres("pinWriter", "pinWriter"));
                        System.out.println(actualTmp() + "=" + CompLex.checarComponenteLexico(e1.getValor()));
                        System.out.println("Param " + actualTmp());
                        System.out.println(actualTmp() + "=" + CompLex.checarComponenteLexico(e2.getValor()));
                        System.out.println("Param " + actualTmp());
                        System.out.println("call pinWriter, 2");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SentPinWriter ::= PINWRITER LPAREN Expresion COMA Expresion NT$16 RPAREN PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPinWriter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        temporizador(e);
                        ctd.guardarCTD(new Tres(nuevaTmp(), e.getValor(), e.getResultado(), "asignacion"));
                        ctd2.guardarCTD(new Tres(actualTmp(), CompLex.checarComponenteLexico(e.getValor()), e.getResultado(), "asignacion"));
                        ctd.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd.guardarCTD(new Tres("timer", "timer"));
                        ctd2.guardarCTD(new Tres("timer", "timer"));
                        System.out.println(actualTmp() + "=" + CompLex.checarComponenteLexico(e.getValor()));
                        System.out.println("Param " + actualTmp());
                        System.out.println("call timer, 1");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SentTimer ::= TIMER LPAREN Expresion NT$17 RPAREN PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentTimer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$18 ::= 
            {
              Object RESULT =null;

                        if(cuentaWhiles > 0) {
                        } else {
                            parser.error(Textos.breakSinWhile);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SentBreak ::= BREAK NT$18 PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentBreak",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$19 ::= 
            {
              Object RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        //cuentaCadenas++;
                        paint(tex);
                        ctd.guardarCTD(new Tres(nuevaTmp(), tex, 0, "texto"));
                        ctd2.guardarCTD(new Tres(actualTmp(), tex, 0, "texto"));
                        ctd.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd2.guardarCTD(new Tres(actualTmp(), "parametro"));
                        ctd.guardarCTD(new Tres("painter", "painter"));
                        ctd2.guardarCTD(new Tres("painter", "painter"));
                        System.out.println(actualTmp() + "=" + tex);
                        System.out.println("Param " + actualTmp());
                        System.out.println("call painter, 1");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SentPainter ::= PAINTER LPAREN CADENATEXTO NT$19 RPAREN PTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentPainter",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Sentencia ::= SentIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Sentencia ::= SentWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sentencia ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sentencia ::= SentPrintN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Sentencia ::= SentPrintS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Sentencia ::= SentPinWriter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Sentencia ::= SentTimer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Sentencia ::= SentBreak 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Sentencia ::= SentPainter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
